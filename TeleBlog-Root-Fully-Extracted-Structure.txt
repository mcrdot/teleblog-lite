TeleBlog-Root/
    .env -
        "# Telegram Bot Tokens
        
         TELEGRAM_BOT_TOKEN=8032387671:AAFqCA2lH9d_o_3I0kSXwhYkR7K4Y8kXKcE 
         
         # TELEGRAM_BOT_TOKEN_2=your_second_bot_token_here 
         
         # Supabase Configuration 
         SUPABASE_URL=https://hudrcdftoqcwxskhuahg.supabase.co SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh1ZHJjZGZ0b3Fjd3hza2h1YWhnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwOTMwNjcsImV4cCI6MjA3MTY2OTA2N30.YqGQBcFC2oVJILZyvVP7OgPlOOkuqO6eF1QaABb7MCo 
         
         # Other environment variables NODE_ENV=development 
        
        
        
         "
    .gitignore -
        "# Environment & secrets
        .env
        .env.local
        .env.production
        tokens.txt
        gitpushcommands.txt
        
        # Dependencies
        /node_modules
        
        # Build / cache
        /dist/
        /build/
        *.log
        
        # Backups / test files
        index8.html
        output.doc
        test.html
        test.js
        app-old.js
        tnc.css
        Proj-Structure.txt
        
        # OS/editor junk
        .DS_Store
        Thumbs.db
        *.tmp
        
        # Development configs
        config.json
        
        # Telegram bot files
        bot.js
        deploy-bot.js
        
        # Supabase local files
        /supabase/functions/create-user"
    Proj-Structure.txt -
        [Binary file skipped]
    README.md -
        "README MD is created
        "
    app.js -
        "// 32c40404-569a-4c38-bea8-736e3865910e
        // app.js - TeleBlog Application with User Type System
        // Enhanced with user type classification and tailored features
        
        // Global state
        let tg;
        let currentUser = null;
        let posts = [];
        let currentView = 'feed';
        let viewHistory = [];
        let isAppInitialized = false;
        let supabaseConnected = false;
        let userTypeSelected = false;
        
        // Initialize application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded - Starting app initialization');
            initializeApp();
        });
        
        async function initializeApp() {
            if (isAppInitialized) return;
            
            try {
                console.log('Step 1: Initializing Telegram WebApp...');
                await initializeTelegramWebApp();
                
                console.log('Step 2: Initializing Supabase...');
                supabaseConnected = await initializeSupabase();
                
                console.log('Step 3: Checking authentication...');
                await checkAuth();
                
                console.log('Step 4: Setting up UI...');
                setupEditorLeaveConfirmation();
                restoreDraftContent();
                
                isAppInitialized = true;
                
                // Initialize bottom navigation state
                updateNavigationState();
                
                if (supabaseConnected) {
                    console.log('✅ App initialization completed - Supabase connected');
                    showNotification('App ready! Connected to database.', 'success');
                } else {
                    console.log('⚠️ App initialization completed - Using mock data');
                    showNotification('App ready! (Using demo data)', 'info');
                }
                
            } catch (error) {
                console.error('❌ App initialization failed:', error);
                showNotification('Failed to initialize app. Please refresh.', 'error');
            }
        }
        
        // Initialize Telegram Web App with version compatibility
        function initializeTelegramWebApp() {
            return new Promise((resolve) => {
                const isLocal = window.location.hostname === 'localhost' || 
                                window.location.hostname === '127.0.0.1' ||
                                window.location.protocol === 'file:';
                
                if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
                    // Production - Real Telegram environment
                    tg = Telegram.WebApp;
                    safelyInitializeTelegram();
                    console.log("✅ Production: Using real Telegram WebApp");
                    resolve();
                } else if (isLocal) {
                    // Development - Local environment with mock
                    tg = createMockTelegramWebApp();
                    console.log("✅ Development: Using mock Telegram WebApp");
                    resolve();
                } else {
                    // Wait for Telegram to load (for production)
                    console.log("⏳ Waiting for Telegram WebApp to load...");
                    const checkTelegram = setInterval(() => {
                        if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
                            clearInterval(checkTelegram);
                            tg = Telegram.WebApp;
                            safelyInitializeTelegram();
                            console.log("✅ Telegram WebApp loaded after wait");
                            resolve();
                        }
                    }, 100);
                    
                    // Timeout after 3 seconds
                    setTimeout(() => {
                        clearInterval(checkTelegram);
                        console.warn("⚠️ Telegram WebApp not available, using fallback");
                        tg = createMockTelegramWebApp();
                        resolve();
                    }, 3000);
                }
            });
        }
        
        // Safe Telegram initialization that handles version differences
        function safelyInitializeTelegram() {
            try {
                // Always safe to call
                if (tg.expand) tg.expand();
                
                // Only call if supported (avoid version warnings)
                if (tg.enableClosingConfirmation) {
                    try {
                        tg.enableClosingConfirmation();
                    } catch (e) {
                        console.log('enableClosingConfirmation not supported in this Telegram version');
                    }
                }
                
                // Only call setBackgroundColor if supported
                if (tg.setBackgroundColor) {
                    try {
                        tg.setBackgroundColor('#121212');
                    } catch (e) {
                        console.log('setBackgroundColor not supported in this Telegram version');
                    }
                }
                
                // Only call setHeaderColor if supported
                if (tg.setHeaderColor) {
                    try {
                        tg.setHeaderColor('#1e1e1e');
                    } catch (e) {
                        console.log('setHeaderColor not supported in this Telegram version');
                    }
                }
                
                console.log('Telegram WebApp safely initialized');
                console.log('Init Data:', tg.initData);
                console.log('Platform:', tg.platform);
                console.log('Version:', tg.version);
                
            } catch (error) {
                console.warn('Telegram initialization had minor issues:', error);
            }
        }
        
        // Initialize Supabase client with connection testing
        async function initializeSupabase() {
            if (!window.SupabaseClient) {
                console.error('❌ SupabaseClient not available');
                return false;
            }
            
            const client = window.SupabaseClient.init();
            if (!client) {
                console.error('❌ Failed to initialize Supabase client');
                return false;
            }
            
            // Test connection
            try {
                const isConnected = await window.SupabaseClient.testConnection();
                if (isConnected) {
                    console.log('✅ Supabase connection successful');
                    return true;
                } else {
                    console.warn('⚠️ Supabase connection failed, using mock data');
                    return false;
                }
            } catch (error) {
                console.warn('⚠️ Supabase connection test error:', error.message);
                return false;
            }
        }
        
        // Create mock Telegram WebApp for development
        function createMockTelegramWebApp() {
            const mockUser = {
                id: Math.floor(Math.random() * 1000000000),
                first_name: "Test",
                last_name: "User", 
                username: "testuser",
                language_code: "en"
            };
            
            return {
                initDataUnsafe: {
                    user: mockUser
                },
                initData: JSON.stringify({user: mockUser}),
                platform: "web",
                version: "7.0",
                expand: function() {
                    console.log("Telegram WebApp: expand() called");
                },
                enableClosingConfirmation: function() {
                    console.log("Telegram WebApp: enableClosingConfirmation() called");
                },
                setBackgroundColor: function(color) {
                    console.log("Telegram WebApp: setBackgroundColor() called with", color);
                },
                setHeaderColor: function(color) {
                    console.log("Telegram WebApp: setHeaderColor() called with", color);
                },
                showPopup: function(params) {
                    console.log("Telegram WebApp: showPopup() called with", params);
                    alert(params.title + "\n\n" + params.message);
                },
                showAlert: function(message) {
                    alert(message);
                },
                showConfirm: function(message, callback) {
                    const result = confirm(message);
                    if (callback) callback(result);
                }
            };
        }
        
        // Update navigation state for bottom nav
        function updateNavigationState() {
            // Remove active class from all nav items
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Add active class to current view
            const navItems = document.querySelectorAll('.nav-item');
            switch(currentView) {
                case 'feed':
                    if (navItems[0]) navItems[0].classList.add('active');
                    break;
                case 'editor':
                    if (navItems[1]) navItems[1].classList.add('active');
                    break;
                case 'profile':
                    if (navItems[2]) navItems[2].classList.add('active');
                    break;
            }
        }
        
        // Navigate to different views
        function navigateTo(view, data = null) {
            console.log('Navigating to:', view);
            viewHistory.push({ view: currentView, data: data });
            currentView = view;
            
            // Update navigation state
            updateNavigationState();
            
            switch(view) {
                case 'feed':
                    loadPosts();
                    break;
                case 'editor':
                    showPostEditor();
                    break;
                case 'profile':
                    showProfile();
                    break;
                case 'user-type-selection':
                    showUserTypeSelection();
                    break;
                default:
                    loadPosts();
            }
        }
        
        // Go back to previous view
        function goBack() {
            if (viewHistory.length > 0) {
                const previous = viewHistory.pop();
                currentView = previous.view;
                navigateTo(previous.view, previous.data);
            } else {
                navigateTo('feed');
            }
        }
        
        // Check authentication status
        async function checkAuth() {
            updateUI('loading', 'Checking authentication...');
            
            if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
                const telegramUser = tg.initDataUnsafe.user;
                console.log('Telegram user detected:', telegramUser);
                await authenticateUser(telegramUser);
            } else {
                console.log('No Telegram user found, showing login');
                showLogin();
            }
        }
        
        // Authenticate user with Supabase integration
        async function authenticateUser(telegramUser) {
            updateUI('loading', 'Logging in...');
            console.log('Authenticating user:', telegramUser.id);
            
            try {
                let user = await window.SupabaseClient.getUserByTelegramId(telegramUser.id);
                console.log('User lookup result:', user);
                
                if (!user) {
                    console.log('Creating new user...');
                    user = await window.SupabaseClient.createUser(telegramUser);
                }
                
                if (user) {
                    currentUser = user;
                    console.log('User authenticated:', currentUser);
                    updateUserInfo();
                    
                    // Check if user needs to select user type
                    if (!currentUser.user_type || currentUser.user_type === 'general') {
                        navigateTo('user-type-selection');
                    } else {
                        navigateTo('feed');
                    }
                } else {
                    console.error('User authentication failed');
                    showLogin();
                    showNotification("Failed to authenticate. Please try again.", 'error');
                }
            } catch (error) {
                console.error("Authentication error:", error);
                showLogin();
                showNotification("Authentication error. Please try again.", 'error');
            }
        }
        
        // Show user type selection screen
        function showUserTypeSelection() {
            const pageContent = document.getElementById('page-content');
            pageContent.innerHTML = `
                <div class="onboarding-container">
                    <h2>Choose Your Profile Type</h2>
                    <p>Select how you'll use TeleBlog to unlock relevant features</p>
                    
                    <div class="user-type-options">
                        <div class="user-type-card" onclick="selectUserType('general')">
                            <div class="type-icon">👤</div>
                            <h3>General User</h3>
                            <p>Share personal stories, opinions, and casual content</p>
                            <ul>
                                <li>Basic post formatting</li>
                                <li>Personal tags</li>
                                <li>Community engagement</li>
                            </ul>
                        </div>
                        
                        <div class="user-type-card" onclick="selectUserType('group_owner')">
                            <div class="type-icon">👥</div>
                            <h3>Group Owner</h3>
                            <p>Manage community content and announcements</p>
                            <ul>
                                <li>Group linking</li>
                                <li>Announcement tags</li>
                                <li>Member targeting</li>
                                <li>Event promotions</li>
                            </ul>
                        </div>
                        
                        <div class="user-type-card" onclick="selectUserType('channel_owner')">
                            <div class="type-icon">📢</div>
                            <h3>Channel Owner</h3>
                            <p>Professional content creation and broadcasting</p>
                            <ul>
                                <li>Advanced formatting</li>
                                <li>Post scheduling</li>
                                <li>Basic analytics</li>
                                <li>Premium tags</li>
                            </ul>
                        </div>
                    </div>
                    
                    <button class="btn btn-primary" onclick="saveUserType()" disabled id="continue-btn">
                        Continue to TeleBlog
                    </button>
                </div>
            `;
        }
        
        // Select user type
        function selectUserType(userType) {
            // Remove selected class from all cards
            document.querySelectorAll('.user-type-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            // Add selected class to clicked card
            event.currentTarget.classList.add('selected');
            
            // Enable continue button
            document.getElementById('continue-btn').disabled = false;
            
            // Store selected type
            window.selectedUserType = userType;
        }
        
        // Save user type to database
        async function saveUserType() {
            if (!window.selectedUserType) {
                showNotification('Please select a user type first.', 'error');
                return;
            }
            
            showNotification('Saving your profile type...', 'loading');
            
            try {
                const result = await window.SupabaseClient.updateUserType(currentUser.id, window.selectedUserType);
                
                if (result) {
                    currentUser.user_type = window.selectedUserType;
                    userTypeSelected = true;
                    showNotification('Profile type saved successfully!', 'success');
                    navigateTo('feed');
                } else {
                    throw new Error('Failed to save user type');
                }
            } catch (error) {
                console.error('Error saving user type:', error);
                showNotification('Failed to save profile type. Please try again.', 'error');
            }
        }
        
        // Update user info in the header
        function updateUserInfo() {
            if (currentUser) {
                const userInfoEl = document.getElementById('user-info');
                const avatarEl = userInfoEl.querySelector('.avatar');
                
                avatarEl.textContent = currentUser.first_name ? 
                    currentUser.first_name.charAt(0).toUpperCase() : 'U';
                
                const name = currentUser.first_name || currentUser.username || 'User';
                userInfoEl.querySelector('span').textContent = name;
                
                console.log('User info updated:', name);
            }
        }
        
        // Load posts from Supabase
        async function loadPosts() {
            console.log('Loading posts...');
            updateUI('loading', 'Loading posts...');
            
            try {
                posts = await window.SupabaseClient.getPublishedPosts();
                console.log("Posts loaded:", posts);
                
                if (posts && posts.length > 0) {
                    console.log(`Displaying ${posts.length} posts`);
                    showPosts();
                } else {
                    console.log('No posts found, showing empty state');
                    showEmptyState();
                }
            } catch (error) {
                console.error("Error loading posts:", error);
                updateUI('error', 'Failed to load posts. Please try again.');
                showNotification('Failed to load posts. Please check your connection.', 'error');
            }
        }
        
        // Display posts in the feed
        function showPosts() {
            const pageContent = document.getElementById('page-content');
            
            let postsHtml = '<div class="feed">';
            
            // Add connection status indicator
            if (!supabaseConnected) {
                postsHtml += `
                    <div class="connection-warning">
                        <span>🔧 Development Mode</span>
                        <p>Using demo data. Real posts will appear when Supabase is connected.</p>
                    </div>
                `;
            }
            
            if (posts && posts.length > 0) {
                posts.forEach((post, index) => {
                    const authorName = post.user ? 
                        `${post.user.first_name || ''} ${post.user.last_name || ''}`.trim() : 
                        (post.author || 'Unknown Author');
                        
                    // Add mock indicator for demo posts
                    const isMockPost = post.id && post.id.startsWith('mock-');
                    const mockBadge = isMockPost ? '<span class="mock-badge">Demo</span>' : '';
                        
                    postsHtml += `
                        <div class="post-card" data-post-id="${post.id}">
                            ${mockBadge}
                            ${post.image ? '<div class="post-image">📷 Post Image</div>' : ''}
                            <div class="post-content">
                                <h3 class="post-title">${post.title || 'Untitled'}</h3>
                                <p class="post-excerpt">${post.excerpt || 'No excerpt available'}</p>
                                <div class="post-meta">
                                    <div>
                                        <span>By ${authorName}</span>
                                        <span> • ${formatDate(post.published_at || post.created_at)}</span>
                                    </div>
                                    <div class="post-tags">
                                        ${post.tags && post.tags.length > 0 ? 
                                            post.tags.map(tag => `<span class="tag">#${tag}</span>`).join('') : 
                                            '<span class="tag">#general</span>'}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });
            } else {
                postsHtml += `
                    <div class="empty-state">
                        <h3>No posts found</h3>
                        <p>Be the first to create a post!</p>
                    </div>
                `;
            }
            
            postsHtml += '</div>';
            pageContent.innerHTML = postsHtml;
            console.log('Posts displayed in UI');
        }
        
        // Format date
        function formatDate(dateString) {
            if (!dateString) return 'Unknown date';
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
            } catch (e) {
                return dateString;
            }
        }
        
        // Get user type specific features
        function getUserTypeFeatures(userType) {
            const features = {
                general: {
                    postTypeLabel: "Personal Post",
                    titlePlaceholder: "What's on your mind?",
                    contentPlaceholder: "Share your thoughts, stories, or experiences...",
                    tagsPlaceholder: "Add personal tags (comma separated)",
                    toolbarButtons: `
                        <button type="button" onclick="formatText('bold')"><b>B</b></button>
                        <button type="button" onclick="formatText('italic')"><i>I</i></button>
                        <button type="button" onclick="insertBulletList()">• List</button>
                    `,
                    specialOptions: `
                        <label>
                            <input type="checkbox" id="is-personal"> Mark as personal story
                        </label>
                    `
                },
                
                group_owner: {
                    postTypeLabel: "Group Announcement",
                    titlePlaceholder: "Announcement title for your group",
                    contentPlaceholder: "Share important updates, events, or news with your group members...",
                    tagsPlaceholder: "Add group-related tags (comma separated)",
                    toolbarButtons: `
                        <button type="button" onclick="formatText('bold')"><b>B</b></button>
                        <button type="button" onclick="formatText('italic')"><i>I</i></button>
                        <button type="button" onclick="insertBulletList()">• List</button>
                        <button type="button" onclick="addAnnouncementBadge()">📢 Announcement</button>
                    `,
                    specialFields: `
                        <div class="group-linking">
                            <label>Link to your Telegram Group (optional)</label>
                            <input type="text" id="linked-group" placeholder="Group username or ID">
                        </div>
                    `,
                    specialOptions: `
                        <label>
                            <input type="checkbox" id="is-important"> Mark as important announcement
                        </label>
                        <label>
                            <input type="checkbox" id="cross-post"> Cross-post to linked group
                        </label>
                    `
                },
                
                channel_owner: {
                    postTypeLabel: "Channel Broadcast",
                    titlePlaceholder: "Professional article title",
                    contentPlaceholder: "Create engaging content for your channel subscribers...",
                    tagsPlaceholder: "Add professional tags for discovery (comma separated)",
                    toolbarButtons: `
                        <button type="button" onclick="formatText('bold')"><b>B</b></button>
                        <button type="button" onclick="formatText('italic')"><i>I</i></button>
                        <button type="button" onclick="formatText('underline')"><u>U</u></button>
                        <button type="button" onclick="insertBulletList()">• List</button>
                        <button type="button" onclick="insertNumberedList()">1. List</button>
                        <button type="button" onclick="addBlockquote()">❝ Quote</button>
                    `,
                    specialFields: `
                        <div class="channel-linking">
                            <label>Link to your Telegram Channel</label>
                            <input type="text" id="linked-channel" placeholder="@yourchannel" required>
                        </div>
                        <div class="scheduling-options">
                            <label>Schedule Publication (optional)</label>
                            <input type="datetime-local" id="schedule-time">
                        </div>
                    `,
                    specialOptions: `
                        <label>
                            <input type="checkbox" id="premium-content"> Mark as premium content
                        </label>
                        <label>
                            <input type="checkbox" id="enable-comments"> Allow comments
                        </label>
                        <label>
                            <input type="checkbox" id="cross-post-channel"> Cross-post to channel
                        </label>
                    `
                }
            };
            
            return features[userType] || features.general;
        }
        
        // Show post editor with user type specific features
        function showPostEditor() {
            const userType = currentUser?.user_type || 'general';
            const editorFeatures = getUserTypeFeatures(userType);
            
            const pageContent = document.getElementById('page-content');
            pageContent.innerHTML = `
                <div class="editor-container">
                    <div class="editor-header">
                        <button onclick="navigateTo('feed')" class="btn btn-back">← Back</button>
                        <h2>Create ${editorFeatures.postTypeLabel}</h2>
                        <button onclick="savePost()" class="btn btn-primary">Publish</button>
                    </div>
                    
                    ${editorFeatures.specialFields || ''}
                    
                    <div class="editor-form">
                        <input type="text" id="post-title" class="post-title-input" 
                               placeholder="${editorFeatures.titlePlaceholder}">
                        
                        <div class="editor-toolbar">
                            ${editorFeatures.toolbarButtons}
                        </div>
                        
                        <textarea id="post-content" class="post-content-input" 
                                  placeholder="${editorFeatures.contentPlaceholder}"></textarea>
                        
                        <div class="post-options">
                            ${editorFeatures.specialOptions}
                        </div>
                        
                        <input type="text" id="post-tags" class="post-tags-input" 
                               placeholder="${editorFeatures.tagsPlaceholder}">
                    </div>
                </div>
            `;
        }
        
        // Save post to Supabase
        async function savePost() {
            const title = document.getElementById('post-title').value;
            const content = document.getElementById('post-content').value;
            const tags = document.getElementById('post-tags').value.split(',').map(tag => tag.trim());
            
            if (!title || !content) {
                showNotification('Please add a title and content to your post.', 'error');
                return;
            }
            
            showNotification('Publishing your post...', 'loading');
            
            try {
                // Check if we have Supabase connection
                if (!supabaseConnected) {
                    showNotification('Cannot publish - Database not connected. Please check Supabase configuration.', 'error');
                    return;
                }
                
                const supabase = window.SupabaseClient.getClient();
                const telegramUser = tg.initDataUnsafe.user;
                const user = await window.SupabaseClient.createUser(telegramUser);
                
                const postData = {
                    title: title,
                    content: content,
                    excerpt: content.substring(0, 150) + '...',
                    tags: tags,
                    user_id: user.id,
                    is_published: true,
                    published_at: new Date().toISOString(),
                    user_type: currentUser?.user_type || 'general'
                };
                
                // Add user type specific data
                const userType = currentUser?.user_type || 'general';
                if (userType === 'group_owner') {
                    const linkedGroup = document.getElementById('linked-group')?.value;
                    if (linkedGroup) postData.linked_group = linkedGroup;
                } else if (userType === 'channel_owner') {
                    const linkedChannel = document.getElementById('linked-channel')?.value;
                    if (linkedChannel) postData.linked_channel = linkedChannel;
                }
                
                const { data, error } = await supabase
                    .from('posts')
                    .insert(postData)
                    .select();
                    
                if (error) throw error;
                
                clearDraft();
                showNotification('Post published successfully!', 'success');
                await loadPosts();
                
            } catch (error) {
                console.error('Error saving post:', error);
                showNotification('Could not publish post. Please try again.', 'error');
            }
        }
        
        // UI Helper functions
        function updateUI(state, message = '') {
            const pageContent = document.getElementById('page-content');
            
            switch(state) {
                case 'loading':
                    pageContent.innerHTML = `
                        <div class="loading-state">
                            <div class="spinner"></div>
                            <p>${message}</p>
                        </div>
                    `;
                    break;
                case 'error':
                    pageContent.innerHTML = `
                        <div class="error-state">
                            <h3>Error</h3>
                            <p>${message}</p>
                            <button onclick="location.reload()" class="btn">Retry</button>
                        </div>
                    `;
                    break;
            }
        }
        
        function showEmptyState() {
            const pageContent = document.getElementById('page-content');
            
            pageContent.innerHTML = `
                <div class="empty-state">
                    <h3>No posts yet</h3>
                    <p>Be the first to create a post in this community!</p>
                    <button onclick="navigateTo('editor')" class="btn">Create First Post</button>
                </div>
            `;
        }
        
        function showLogin() {
            updateUI('error', 'Please open this app in Telegram to authenticate.');
        }
        
        function showNotification(message, type = 'info') {
            // Simple notification implementation
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <span>${message}</span>
                <button onclick="this.parentElement.remove()">×</button>
            `;
            
            const container = document.getElementById('notification-container') || document.body;
            container.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }
        
        function setupEditorLeaveConfirmation() {
            // Implementation for draft saving
            window.addEventListener('beforeunload', function (e) {
                const title = document.getElementById('post-title')?.value;
                const content = document.getElementById('post-content')?.value;
                
                if (title || content) {
                    e.preventDefault();
                    e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
                }
            });
        }
        
        function restoreDraftContent() {
            // Implementation for draft restoration
            try {
                const draft = localStorage.getItem('teleblog_draft');
                if (draft) {
                    const { title, content, tags } = JSON.parse(draft);
                    // Will be applied when editor is opened
                    localStorage.setItem('teleblog_draft_restore', JSON.stringify({ title, content, tags }));
                }
            } catch (error) {
                console.log('No draft to restore');
            }
        }
        
        function clearDraft() {
            // Implementation for clearing drafts
            localStorage.removeItem('teleblog_draft');
            localStorage.removeItem('teleblog_draft_restore');
        }
        
        // Show profile with user type information
        function showProfile() {
            const pageContent = document.getElementById('page-content');
            pageContent.innerHTML = `
                <div class="profile-container">
                    <div class="profile-header">
                        <h2>Your Profile</h2>
                        <span class="user-type-badge ${currentUser?.user_type || 'general'}">
                            ${getUserTypeLabel(currentUser?.user_type || 'general')}
                        </span>
                    </div>
                    <div class="profile-content">
                        <div class="profile-info">
                            <div class="profile-avatar">${currentUser?.first_name?.charAt(0) || 'U'}</div>
                            <h3>${currentUser?.first_name || 'User'} ${currentUser?.last_name || ''}</h3>
                            <p>@${currentUser?.username || 'no-username'}</p>
                        </div>
                        
                        ${renderUserTypeSpecificInfo()}
                        
                        <div class="profile-stats">
                            <div class="stat">
                                <strong>0</strong>
                                <span>Posts</span>
                            </div>
                            <div class="stat">
                                <strong>0</strong>
                                <span>Followers</span>
                            </div>
                            <div class="stat">
                                <strong>0</strong>
                                <span>Following</span>
                            </div>
                        </div>
                        
                        <div class="profile-actions">
                            <button class="btn" onclick="showEditProfile()">Edit Profile</button>
                            <button class="btn" onclick="changeUserType()">Change User Type</button>
                            ${currentUser?.user_type !== 'general' ? 
                                `<button class="btn" onclick="manageLinkedEntities()">Manage ${currentUser.user_type === 'group_owner' ? 'Groups' : 'Channels'}</button>` : ''}
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Helper function to get user type label
        function getUserTypeLabel(userType) {
            const labels = {
                general: '👤 General User',
                group_owner: '👥 Group Owner', 
                channel_owner: '📢 Channel Owner'
            };
            return labels[userType] || '👤 User';
        }
        
        // Render user type specific information
        function renderUserTypeSpecificInfo() {
            const userType = currentUser?.user_type || 'general';
            
            switch(userType) {
                case 'group_owner':
                    return `
                        <div class="user-type-info">
                            <h4>Group Owner Features</h4>
                            <ul>
                                <li>Group announcements</li>
                                <li>Member engagement tools</li>
                                <li>Cross-posting to Telegram groups</li>
                            </ul>
                        </div>
                    `;
                case 'channel_owner':
                    return `
                        <div class="user-type-info">
                            <h4>Channel Owner Features</h4>
                            <ul>
                                <li>Professional content creation</li>
                                <li>Post scheduling</li>
                                <li>Channel integration</li>
                            </ul>
                        </div>
                    `;
                default:
                    return `
                        <div class="user-type-info">
                            <h4>General User Features</h4>
                            <ul>
                                <li>Personal blogging</li>
                                <li>Community engagement</li>
                                <li>Content discovery</li>
                            </ul>
                        </div>
                    `;
            }
        }
        
        // Change user type
        function changeUserType() {
            navigateTo('user-type-selection');
        }
        
        // Manage linked entities (groups/channels)
        function manageLinkedEntities() {
            showNotification('Linked entities management coming soon!', 'info');
        }
        
        // Edit profile
        function showEditProfile() {
            showNotification('Profile editing coming soon!', 'info');
        }
        
        // Placeholder functions for text formatting (to be implemented)
        function formatText(type) {
            showNotification(`${type} formatting coming soon!`, 'info');
        }
        
        function insertBulletList() {
            showNotification('List formatting coming soon!', 'info');
        }
        
        function insertNumberedList() {
            showNotification('Numbered list coming soon!', 'info');
        }
        
        function addBlockquote() {
            showNotification('Blockquote feature coming soon!', 'info');
        }
        
        function addAnnouncementBadge() {
            showNotification('Announcement badge coming soon!', 'info');
        }
        
        // Add CSS for new elements
        const additionalCSS = `
            .onboarding-container {
                padding: 2rem 1rem;
                text-align: center;
            }
            .user-type-options {
                display: flex;
                flex-direction: column;
                gap: 1rem;
                margin: 2rem 0;
            }
            .user-type-card {
                border: 2px solid #ddd;
                border-radius: 12px;
                padding: 1.5rem;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: left;
            }
            .user-type-card:hover {
                border-color: #007bff;
                transform: translateY(-2px);
            }
            .user-type-card.selected {
                border-color: #007bff;
                background-color: rgba(0, 123, 255, 0.1);
            }
            .type-icon {
                font-size: 2rem;
                margin-bottom: 1rem;
            }
            .user-type-card h3 {
                margin: 0 0 0.5rem 0;
                color: #333;
            }
            .user-type-card p {
                margin: 0 0 1rem 0;
                color: #666;
            }
            .user-type-card ul {
                margin: 0;
                padding-left: 1.2rem;
                color: #555;
            }
            .user-type-card li {
                margin-bottom: 0.3rem;
            }
            .user-type-badge {
                background: #007bff;
                color: white;
                padding: 0.3rem 0.8rem;
                border-radius: 20px;
                font-size: 0.8rem;
                font-weight: bold;
                margin-left: 1rem;
            }
            .user-type-info {
                background: #f8f9fa;
                padding: 1rem;
                border-radius: 8px;
                margin: 1rem 0;
            }
            .user-type-info h4 {
                margin: 0 0 0.5rem 0;
                color: #333;
            }
            .user-type-info ul {
                margin: 0;
                padding-left: 1.2rem;
                color: #555;
            }
            .editor-toolbar {
                display: flex;
                gap: 0.5rem;
                margin-bottom: 1rem;
                padding: 0.5rem;
                background: #f8f9fa;
                border-radius: 8px;
            }
            .editor-toolbar button {
                padding: 0.5rem;
                border: 1px solid #ddd;
                background: white;
                border-radius: 4px;
                cursor: pointer;
            }
            .group-linking, .channel-linking, .scheduling-options {
                margin-bottom: 1rem;
                padding: 1rem;
                background: #f8f9fa;
                border-radius: 8px;
            }
            .group-linking label, .channel-linking label, .scheduling-options label {
                display: block;
                margin-bottom: 0.5rem;
                font-weight: bold;
            }
            .post-options {
                margin: 1rem 0;
                padding: 1rem;
                background: #f8f9fa;
                border-radius: 8px;
            }
            .post-options label {
                display: block;
                margin-bottom: 0.5rem;
            }
            .loading-state {
                text-align: center;
                padding: 2rem;
            }
            .spinner {
                border: 3px solid #f3f3f3;
                border-top: 3px solid #007bff;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 0 auto 1rem;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                background: #333;
                color: white;
                padding: 1rem;
                border-radius: 8px;
                z-index: 1000;
                display: flex;
                align-items: center;
                gap: 1rem;
                max-width: 300px;
            }
            .notification-success { background: #28a745; }
            .notification-error { background: #dc3545; }
            .notification-loading { background: #17a2b8; }
            .notification button {
                background: none;
                border: none;
                color: white;
                font-size: 1.2rem;
                cursor: pointer;
            }
            .editor-container {
                padding: 1rem;
            }
            .editor-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
            }
            .post-title-input {
                width: 100%;
                padding: 1rem;
                font-size: 1.5rem;
                border: none;
                border-bottom: 2px solid #333;
                margin-bottom: 1rem;
                background: transparent;
                color: inherit;
            }
            .post-content-input {
                width: 100%;
                height: 300px;
                padding: 1rem;
                border: 1px solid #ccc;
                border-radius: 8px;
                background: transparent;
                color: inherit;
                resize: vertical;
            }
            .post-tags-input {
                width: 100%;
                padding: 0.5rem;
                border: 1px solid #ccc;
                border-radius: 4px;
                background: transparent;
                color: inherit;
                margin-top: 1rem;
            }
            .connection-warning {
                background: #fff3cd;
                color: #856404;
                padding: 1rem;
                border-radius: 8px;
                margin-bottom: 1rem;
                border: 1px solid #ffeaa7;
            }
            .connection-warning span {
                font-weight: bold;
            }
            .mock-badge {
                background: #6c757d;
                color: white;
                padding: 0.2rem 0.5rem;
                border-radius: 4px;
                font-size: 0.8rem;
                position: absolute;
                top: 0.5rem;
                right: 0.5rem;
            }
            .post-card {
                position: relative;
            }
            .profile-container {
                padding: 1rem;
            }
            .profile-header {
                display: flex;
                align-items: center;
                margin-bottom: 2rem;
            }
            .profile-avatar {
                width: 80px;
                height: 80px;
                border-radius: 50%;
                background: #007bff;
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 2rem;
                font-weight: bold;
                margin: 0 auto 1rem;
            }
            .profile-info {
                text-align: center;
                margin-bottom: 2rem;
            }
            .profile-stats {
                display: flex;
                justify-content: space-around;
                margin-bottom: 2rem;
            }
            .stat {
                text-align: center;
            }
            .stat strong {
                display: block;
                font-size: 1.5rem;
            }
            .profile-actions {
                display: flex;
                gap: 1rem;
                justify-content: center;
                flex-wrap: wrap;
            }
        `;
        
        // Inject additional CSS
        const style = document.createElement('style');
        style.textContent = additionalCSS;
        document.head.appendChild(style);
        
        // Make functions globally available for HTML onclick handlers
        window.navigateTo = navigateTo;
        window.goBack = goBack;
        window.savePost = savePost;
        window.selectUserType = selectUserType;
        window.saveUserType = saveUserType;
        window.changeUserType = changeUserType;
        window.manageLinkedEntities = manageLinkedEntities;
        window.showEditProfile = showEditProfile;
        window.formatText = formatText;
        window.insertBulletList = insertBulletList;
        window.insertNumberedList = insertNumberedList;
        window.addBlockquote = addBlockquote;
        window.addAnnouncementBadge = addAnnouncementBadge;"
    config.js -
        "// config.js - Updated for production
        window.AppConfig = {
            supabase: {
                url: "https://hudrcdftoqcwxskhuahg.supabase.co",
                anonKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh1ZHJjZGZ0b3Fjd3hza2h1YWhnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwOTMwNjcsImV4cCI6MjA3MTY2OTA2N30.YqGQBcFC2oVJILZyvVP7OgPlOOkuqO6eF1QaABb7MCo"
            },
            telegram: {
                botToken: "8032387671:AAF_v7iLV43XqqE4wtEw2JD6jgvm0CcjYPE",
                webAppUrl: "https://mcrdot.github.io/teleblog-lite/"
            },
            environment: "production"
        };"
    config.production.json -
        "{
          "IS_DEVELOPMENT": false,
          "TELEGRAM_BOT_TOKEN": "8032387671:AAF_v7iLV43XqqE4wtEw2JD6jgvm0CcjYPE",
          "SUPABASE_URL": "https://hudrcdftoqcwxskhuahg.supabase.co",
          "SUPABASE_ANON_KEY": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh1ZHJjZGZ0b3Fjd3hza2h1YWhnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwOTMwNjcsImV4cCI6MjA3MTY2OTA2N30.YqGQBcFC2oVJILZyvVP7OgPlOOkuqO6eF1QaABb7MCo",
          "MONETAG_ZONE_ID": "9803188",
          "BOT_USERNAME": "TeleBlogOfficialBot"
        }"
    index.html -
        "<!-- 32c40404-569a-4c38-bea8-736e3865910e -->
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
          <title>TeleBlog Official - Telegram Blogging Platform</title>
        
          <!-- Telegram script -->
          <script src="https://telegram.org/js/telegram-web-app.js"></script>
        
          <!-- Favicon -->
          <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>📝</text></svg>">
        
          <!-- Supabase client (core library) -->
          <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
        
          <!-- Theme Styles -->
          <link rel="stylesheet" href="styles.css">
        </head>
        <body>
          <div class="dev-warning" id="dev-warning" style="display: none;">
            Development Mode: Using local Telegram Web App JS
          </div>
        
          <div id="app">
            <header>
              <div class="logo">TeleBlog Official</div>
              <div class="user-info" id="user-info">
                <div class="avatar">U</div>
                <span>Loading...</span>
              </div>
              <!-- Theme Toggle Button -->
              <button id="theme-toggle" class="btn">🌙</button>
            </header>
        
            <main>
              <div id="page-content">
                <div class="loading">
                  <p>Initializing TeleBlog...</p>
                </div>
              </div>
        
              <div id="ad-container">
                <p>Ad content will be displayed here</p>
              </div>
            </main>
        
            <footer>
              <p>TeleBlog Official - Powered by Telegram Web App</p>
              <p id="environment-info">Environment: Detecting...</p>
              <p>Developed By: F.S.S.A @VT_Global</p>
            </footer>
          </div>
        
          <div id="notification-container"></div>
        
          <!-- Bottom Navigation -->
          <nav class="bottom-nav">
            <button class="nav-item active" onclick="navigateTo('feed')">
              <span class="nav-icon">📝</span>
              <span class="nav-label">Feed</span>
            </button>
            <button class="nav-item" onclick="navigateTo('editor')">
              <span class="nav-icon">✍️</span>
              <span class="nav-label">Create</span>
            </button>
            <button class="nav-item" onclick="navigateTo('profile')">
              <span class="nav-icon">👤</span>
              <span class="nav-label">Profile</span>
            </button>
          </nav>
        
          <!-- Scripts in CORRECT ORDER -->
          <script src="config.js"></script>
          <script src="scripts/supabase-client.js"></script>
          <script src="app.js"></script>
          <script src="theme.js"></script>
        
          <!-- Enhanced initialization -->
          <script>
            // Enhanced environment detection that works with VPN
            function detectEnvironment() {
              const isLocal = window.location.hostname === 'localhost' || 
                             window.location.hostname === '127.0.0.1' ||
                             window.location.protocol === 'file:';
              
              const isTelegram = typeof Telegram !== 'undefined' && Telegram.WebApp;
              
              console.log('Environment Detection:', {
                hostname: window.location.hostname,
                protocol: window.location.protocol,
                isLocal: isLocal,
                isTelegram: isTelegram,
                telegramAvailable: !!Telegram?.WebApp
              });
              
              return { isLocal, isTelegram };
            }
        
            // Update environment info
            const env = detectEnvironment();
            const envInfo = document.getElementById('environment-info');
            
            if (env.isLocal) {
              document.getElementById('dev-warning').style.display = 'block';
              envInfo.textContent = 'Environment: Development (Local)';
            } else {
              envInfo.textContent = 'Environment: Production (Telegram)';
            }
        
            console.log('✅ All scripts loaded successfully');
          </script>
        </body>
        </html>"
    scripts/
        ads-manager.js -
            "// scripts/ads-manager.js
            // Enhanced with development mode detection and safe ad practices
            
            // Development environment detection
            const isDevelopment = window.location.hostname === 'localhost' || 
                                  window.location.hostname === '127.0.0.1' ||
                                  window.location.hostname.includes('github.io');
            
            class AdManager {
                constructor() {
                    this.adZone = '9803188';
                    this.adsShown = 0;
                    this.maxAdsPerSession = isDevelopment ? 2 : 5; // Fewer ads in development
                    this.adInterval = isDevelopment ? 60000 : 30000; // Longer interval in development (60s vs 30s)
                    this.lastAdTime = 0;
                    this.isInitialized = false;
                    this.userInteractions = 0;
                    
                    console.log('Ad Manager initialized in', isDevelopment ? 'Development' : 'Production', 'mode');
                }
            
                init() {
                    if (this.isInitialized) return;
                    
                    console.log('Monetag Ad Manager initialized');
                    this.isInitialized = true;
                    
                    // Setup ad containers
                    this.setupAdContainers();
                    
                    // Setup interstitial ads - but only if not in development
                    if (!isDevelopment) {
                        this.setupInterstitialAds();
                    } else {
                        console.log('Development mode: Skipping automatic ad setup');
                    }
                    
                    // Track user interactions
                    this.setupInteractionTracking();
                }
            
                setupAdContainers() {
                    // Create main ad container if it doesn't exist
                    if (!document.getElementById('monetag-ad-container')) {
                        const adContainer = document.createElement('div');
                        adContainer.id = 'monetag-ad-container';
                        adContainer.style.cssText = 'width: 100%; min-height: 120px; margin: 20px 0; display: flex; align-items: center; justify-content: center; background: #272727ff; border-radius: 0px;';
                        document.body.appendChild(adContainer);
                    }
                }
            
                setupInteractionTracking() {
                    // Track clicks, scrolls, and other interactions
                    document.addEventListener('click', () => this.trackUserInteraction());
                    document.addEventListener('scroll', () => this.trackUserInteraction());
                    
                    // Track tab changes/page navigation in your app
                    if (typeof window.showPosts === 'function') {
                        const originalShowPosts = window.showPosts;
                        window.showPosts = () => {
                            this.trackUserInteraction();
                            return originalShowPosts();
                        };
                    }
                    
                    if (typeof window.showTrending === 'function') {
                        const originalShowTrending = window.showTrending;
                        window.showTrending = () => {
                            this.trackUserInteraction();
                            return originalShowTrending();
                        };
                    }
                    
                    if (typeof window.showFollowing === 'function') {
                        const originalShowFollowing = window.showFollowing;
                        window.showFollowing = () => {
                            this.trackUserInteraction();
                            return originalShowFollowing();
                        };
                    }
                }
            
                trackUserInteraction() {
                    this.userInteractions++;
                    console.log('User interaction tracked:', this.userInteractions);
                }
            
                setupInterstitialAds() {
                    // Show interstitial on app start after delay
                    setTimeout(() => {
                        this.showInAppInterstitial();
                    }, 5000); // Show after 5 seconds
            
                    // Show interstitial when navigating between sections
                    this.setupNavigationTriggers();
                }
            
                setupNavigationTriggers() {
                    // Listen for custom navigation events
                    window.addEventListener('sectionChange', () => {
                        this.showInAppInterstitial();
                    });
            
                    // Override your navigation functions to trigger ads
                    this.patchNavigationFunctions();
                }
            
                patchNavigationFunctions() {
                    // Store original functions
                    const originalShowPosts = window.showPosts;
                    const originalShowTrending = window.showTrending;
                    const originalShowFollowing = window.showFollowing;
            
                    // Patch with ad triggers
                    window.showPosts = () => {
                        this.triggerAdBeforeNavigation();
                        originalShowPosts();
                    };
            
                    window.showTrending = () => {
                        this.triggerAdBeforeNavigation();
                        originalShowTrending();
                    };
            
                    window.showFollowing = () => {
                        this.triggerAdBeforeNavigation();
                        originalShowFollowing();
                    };
                }
            
                triggerAdBeforeNavigation() {
                    if (this.canShowAd()) {
                        this.showInAppInterstitial();
                    }
                }
            
                canShowAd() {
                    const now = Date.now();
                    const timeSinceLastAd = now - this.lastAdTime;
                    
                    if (isDevelopment) {
                        // Very restrictive in development - only show after multiple interactions
                        // and with longer intervals between ads
                        return this.adsShown < this.maxAdsPerSession && 
                               this.userInteractions > 3 &&
                               timeSinceLastAd > this.adInterval;
                    }
                    
                    // Normal rules for production
                    return this.adsShown < this.maxAdsPerSession && 
                           timeSinceLastAd > this.adInterval;
                }
            
                // In-App Interstitial
                showInAppInterstitial() {
                    if (!this.canShowAd()) {
                        console.log('Ad not shown - conditions not met');
                        return;
                    }
                    
                    // In development, show mock ads instead of real ones
                    if (isDevelopment) {
                        console.log('Development: Would show interstitial ad now');
                        this.adsShown++;
                        this.lastAdTime = Date.now();
                        this.showMockAd('interstitial');
                        return;
                    }
                    
                    try {
                        show_9803188({
                            type: 'inApp',
                            inAppSettings: {
                                frequency: this.maxAdsPerSession,
                                capping: 0.1, // 6 minutes
                                interval: 30, // 30 seconds
                                timeout: 5,   // 5 second delay
                                everyPage: false
                            }
                        }).then(() => {
                            console.log('In-app interstitial shown successfully');
                            this.adsShown++;
                            this.lastAdTime = Date.now();
                            this.trackAdImpression('inAppInterstitial');
                        }).catch(error => {
                            console.warn('In-app interstitial failed:', error);
                        });
                    } catch (error) {
                        console.error('Error showing in-app interstitial:', error);
                    }
                }
            
                // Show a mock ad for development
                showMockAd(type) {
                    const adContainer = document.getElementById('monetag-ad-container') || document.getElementById('ad-container');
                    if (adContainer) {
                        adContainer.innerHTML = `
                            <div style="text-align: center; padding: 20px;">
                                <h3>Development Mode: Mock Ad</h3>
                                <p>This would be a ${type} ad in production</p>
                                <p>User Interactions: ${this.userInteractions}</p>
                                <p>Ads Shown: ${this.adsShown}</p>
                                <button onclick="window.monetagAdManager.trackUserInteraction()" style="padding: 10px; background: #4a76d0; color: white; border: none; border-radius: 4px;">
                                    Simulate Interaction
                                </button>
                            </div>
                        `;
                    }
                    
                    // Log ad impression for debugging
                    console.log(`Mock ${type} ad shown. Interactions: ${this.userInteractions}, Ads: ${this.adsShown}`);
                }
            
                // Rewarded Interstitial
                showRewardedInterstitial() {
                    return new Promise((resolve, reject) => {
                        // In development, show mock ad
                        if (isDevelopment) {
                            console.log('Development: Would show rewarded interstitial now');
                            this.showMockAd('rewardedInterstitial');
                            this.rewardUser();
                            resolve(true);
                            return;
                        }
                        
                        try {
                            show_9803188().then(() => {
                                console.log('Rewarded interstitial completed');
                                this.trackAdImpression('rewardedInterstitial');
                                resolve(true);
                                
                                // Add your user reward function here
                                this.rewardUser();
                                
                            }).catch(error => {
                                console.warn('Rewarded interstitial failed:', error);
                                reject(error);
                            });
                        } catch (error) {
                            console.error('Error showing rewarded interstitial:', error);
                            reject(error);
                        }
                    });
                }
            
                // Rewarded Popup
                showRewardedPopup() {
                    return new Promise((resolve, reject) => {
                        // In development, show mock ad
                        if (isDevelopment) {
                            console.log('Development: Would show rewarded popup now');
                            this.showMockAd('rewardedPopup');
                            this.rewardUser();
                            resolve(true);
                            return;
                        }
                        
                        try {
                            show_9803188('pop').then(() => {
                                console.log('Rewarded popup completed');
                                this.trackAdImpression('rewardedPopup');
                                resolve(true);
                                
                                // Add your user reward function here
                                this.rewardUser();
                                
                            }).catch(error => {
                                console.warn('Rewarded popup failed:', error);
                                reject(error);
                            });
                        } catch (error) {
                            console.error('Error showing rewarded popup:', error);
                            reject(error);
                        }
                    });
                }
            
                rewardUser() {
                    // Implement your reward logic here
                    console.log('User rewarded for watching ad');
                    
                    // Example: Give user premium content access
                    if (window.currentUser) {
                        // Update user state or give rewards
                        if (window.tg && window.tg.showPopup) {
                            window.tg.showPopup({
                                title: 'Reward Unlocked!',
                                message: 'Thank you for watching the ad. You have earned a reward!'
                            });
                        } else {
                            alert('Reward Unlocked! Thank you for watching the ad.');
                        }
                    }
                }
            
                trackAdImpression(adType) {
                    // Track ad impressions in your database
                    if (window.supabase && window.currentUser) {
                        window.supabase
                            .from('ad_impressions')
                            .insert({
                                user_id: window.currentUser.id,
                                ad_network: 'monetag',
                                ad_type: adType,
                                revenue_estimate: this.calculateRevenueEstimate(adType)
                            })
                            .then(({ error }) => {
                                if (error) {
                                    console.error('Error tracking ad impression:', error);
                                }
                            });
                    }
                }
            
                calculateRevenueEstimate(adType) {
                    // Simple revenue estimation (replace with actual rates)
                    const rates = {
                        'inAppInterstitial': 0.002,
                        'rewardedInterstitial': 0.005,
                        'rewardedPopup': 0.003
                    };
                    return rates[adType] || 0.001;
                }
            
                // Method to show ads manually (for testing)
                showAdManual(adType = 'inAppInterstitial') {
                    switch (adType) {
                        case 'rewardedInterstitial':
                            return this.showRewardedInterstitial();
                        case 'rewardedPopup':
                            return this.showRewardedPopup();
                        default:
                            this.showInAppInterstitial();
                            return Promise.resolve();
                    }
                }
            }
            
            // Initialize ad manager
            window.monetagAdManager = new AdManager();
            
            // Initialize when document is ready
            document.addEventListener('DOMContentLoaded', () => {
                // Wait a bit for Telegram WebApp to initialize
                setTimeout(() => {
                    window.monetagAdManager.init();
                }, 2000);
            });
            
            // Export for testing
            if (typeof module !== 'undefined' && module.exports) {
                module.exports = AdManager;
            }"
        config-loader.js -
            "// scripts/config-loader.js - UPDATED
            (async function() {
                try {
                    // Try to load production config first
                    const response = await fetch('/config.production.json');
                    if (response.ok) {
                        const config = await response.json();
                        window.AppConfig = {
                            supabase: {
                                url: config.SUPABASE_URL,
                                anonKey: config.SUPABASE_ANON_KEY
                            },
                            telegram: {
                                botToken: config.TELEGRAM_BOT_TOKEN,
                                webAppUrl: "https://mcrdot.github.io/teleblog-lite/"
                            },
                            environment: config.IS_DEVELOPMENT ? "development" : "production"
                        };
                        console.log('✅ Production configuration loaded successfully');
                    } else {
                        throw new Error('Production config not found');
                    }
                } catch (error) {
                    console.error('❌ Failed to load production config:', error);
                    // Fallback to direct configuration
                    window.AppConfig = {
                        supabase: {
                            url: "https://hudrcdftoqcwxskhuahg.supabase.co",
                            anonKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh1ZHJjZGZ0b3Fjd3hza2h1YWhnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwOTMwNjcsImV4cCI6MjA3MTY2OTA2N30.YqGQBcFC2oVJILZyvVP7OgPlOOkuqO6eF1QaABb7MCo"
                        },
                        telegram: {
                            botToken: "8032387671:AAF_v7iLV43XqqE4wtEw2JD6jgvm0CcjYPE",
                            webAppUrl: "https://mcrdot.github.io/teleblog-lite/"
                        },
                        environment: "production"
                    };
                    console.log('⚠️ Using direct configuration fallback');
                }
                
                initializeEnvironment();
            })();
            
            function initializeEnvironment() {
                // Set up based on environment
                if (window.AppConfig.environment === "development") {
                    console.log('🔧 Running in development mode');
                } else {
                    console.log('🚀 Running in production mode');
                }
            }"
        supabase-client.js -
            "// scripts/supabase-client.js - UPDATED WITH USER TYPE SUPPORT
            let supabaseClient;
            let isInitialized = false;
            let connectionTested = false;
            
            function initSupabase() {
                if (isInitialized) {
                    console.log('✅ Supabase already initialized');
                    return supabaseClient;
                }
            
                if (!window.AppConfig || !window.AppConfig.supabase) {
                    console.error("❌ Supabase configuration not found in AppConfig");
                    return null;
                }
            
                const config = window.AppConfig.supabase;
                
                if (!config.url || !config.anonKey) {
                    console.error("❌ Supabase URL or anonKey missing");
                    return null;
                }
            
                try {
                    supabaseClient = window.supabase.createClient(
                        config.url,
                        config.anonKey,
                        {
                            auth: {
                                persistSession: false,
                                autoRefreshToken: false,
                                detectSessionInUrl: false
                            },
                            global: {
                                headers: {
                                    'X-Client-Info': 'teleblog-app'
                                }
                            }
                        }
                    );
                    
                    isInitialized = true;
                    console.log("✅ Supabase client initialized");
                    console.log("📋 Supabase URL:", config.url);
                    console.log("🔑 API Key present:", config.anonKey ? 'Yes' : 'No');
                    
                    return supabaseClient;
                } catch (err) {
                    console.error("❌ Failed to initialize Supabase client:", err);
                    return null;
                }
            }
            
            // Test Supabase connection
            async function testConnection() {
                if (connectionTested) return true;
                
                if (!supabaseClient && !initSupabase()) {
                    console.warn("⚠️ Cannot test connection - Supabase not initialized");
                    return false;
                }
            
                try {
                    console.log("🔍 Testing Supabase connection...");
                    const { data, error } = await supabaseClient
                        .from('posts')
                        .select('id')
                        .limit(1);
            
                    if (error) {
                        console.error("❌ Supabase connection test failed:", error);
                        
                        if (error.message.includes('JWT')) {
                            console.error("🔑 API Key issue: Invalid or expired JWT");
                        } else if (error.message.includes('401')) {
                            console.error("🔐 Authentication issue: Invalid API key");
                        } else if (error.message.includes('network') || error.message.includes('fetch')) {
                            console.error("🌐 Network issue: Cannot reach Supabase");
                        }
                        
                        return false;
                    }
            
                    console.log("✅ Supabase connection test successful");
                    connectionTested = true;
                    return true;
                } catch (err) {
                    console.error("❌ Connection test exception:", err);
                    return false;
                }
            }
            
            // ─── Supabase helper functions ────────────────────────────────────────────────
            
            async function getUserByTelegramId(telegramId) {
                if (!supabaseClient && !initSupabase()) {
                    console.warn("⚠️ Supabase not initialized in getUserByTelegramId");
                    return null;
                }
            
                // Test connection first
                const connected = await testConnection();
                if (!connected) {
                    // CHANGED: Force real connection only - no mock fallback
                    console.error("❌ No Supabase connection - cannot proceed");
                    return null;
                }
            
                try {
                    const { data, error } = await supabaseClient
                        .from("users")
                        .select("*")
                        .eq("telegram_id", telegramId)
                        .maybeSingle();
            
                    if (error) {
                        console.error("❌ Error fetching user:", error);
                        // CHANGED: No mock fallback
                        return null;
                    }
            
                    return data;
                } catch (err) {
                    console.error("❌ Exception in getUserByTelegramId:", err);
                    // CHANGED: No mock fallback
                    return null;
                }
            }
            
            async function createUser(telegramUser) {
                if (!supabaseClient && !initSupabase()) {
                    console.warn("⚠️ Supabase not initialized in createUser");
                    // CHANGED: No mock fallback
                    return null;
                }
            
                // Test connection first
                const connected = await testConnection();
                if (!connected) {
                    // CHANGED: Force real connection only - no mock fallback
                    console.error("❌ No Supabase connection - cannot proceed");
                    return null;
                }
            
                try {
                    const existingUser = await getUserByTelegramId(telegramUser.id);
                    if (existingUser && existingUser.id && !existingUser.id.startsWith('dev-')) {
                        console.log("ℹ️ User already exists:", existingUser.id);
                        return existingUser;
                    }
            
                    const userData = {
                        telegram_id: telegramUser.id,
                        username: telegramUser.username || null,
                        first_name: telegramUser.first_name || null,
                        last_name: telegramUser.last_name || null,
                        language_code: telegramUser.language_code || null,
                        is_premium: telegramUser.is_premium || false,
                        user_type: 'general', // Default user type
                        profile_completed: false,
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString(),
                    };
            
                    const { data, error } = await supabaseClient
                        .from("users")
                        .insert(userData)
                        .select()
                        .single();
            
                    if (error) {
                        console.error("❌ Error creating user:", error);
                        // CHANGED: No mock fallback
                        return null;
                    }
            
                    console.log("✅ User created successfully:", data.id);
                    return data;
                } catch (err) {
                    console.error("❌ Exception in createUser:", err);
                    // CHANGED: No mock fallback
                    return null;
                }
            }
            
            // NEW FUNCTION: Update user type
            async function updateUserType(userId, userType) {
                if (!supabaseClient && !initSupabase()) {
                    console.warn("⚠️ Supabase not initialized in updateUserType");
                    return false;
                }
            
                // Test connection first
                const connected = await testConnection();
                if (!connected) {
                    // CHANGED: Force real connection only
                    console.error("❌ No Supabase connection - cannot proceed");
                    return false;
                }
            
                try {
                    const { data, error } = await supabaseClient
                        .from("users")
                        .update({
                            user_type: userType,
                            profile_completed: true,
                            updated_at: new Date().toISOString()
                        })
                        .eq("id", userId)
                        .select()
                        .single();
            
                    if (error) {
                        console.error("❌ Error updating user type:", error);
                        return false;
                    }
            
                    console.log("✅ User type updated successfully:", data.user_type);
                    return true;
                } catch (err) {
                    console.error("❌ Exception in updateUserType:", err);
                    return false;
                }
            }
            
            async function getPublishedPosts(limit = 10, offset = 0) {
                if (!supabaseClient && !initSupabase()) {
                    console.warn("⚠️ Supabase not initialized, returning mock posts");
                    // CHANGED: Return empty array instead of mock posts
                    return [];
                }
            
                // Test connection first
                const connected = await testConnection();
                if (!connected) {
                    console.warn("⚠️ No Supabase connection, using mock posts");
                    // CHANGED: Return empty array instead of mock posts
                    return [];
                }
            
                try {
                    console.log("📡 Fetching posts from Supabase...");
                    const { data, error } = await supabaseClient
                        .from("posts")
                        .select(`
                            *,
                            user:users(first_name, last_name, username, user_type)
                        `)
                        .eq("is_published", true)
                        .order("published_at", { ascending: false })
                        .range(offset, offset + limit - 1);
            
                    if (error) {
                        console.error("❌ Error fetching posts:", error);
                        console.log("🔄 Falling back to mock posts");
                        // CHANGED: Return empty array instead of mock posts
                        return [];
                    }
            
                    if (!data || data.length === 0) {
                        console.warn("⚠️ No posts found in database, showing mock posts");
                        // CHANGED: Return empty array instead of mock posts
                        return [];
                    }
            
                    console.log(`✅ Loaded ${data.length} real posts from Supabase`);
                    return data;
                } catch (err) {
                    console.error("❌ Exception in getPublishedPosts:", err);
                    // CHANGED: Return empty array instead of mock posts
                    return [];
                }
            }
            
            // ─── Mock Generators (KEPT BUT NOT USED) ─────────────────────────────────────
            
            function getMockUser(telegramUser) {
                console.log("👤 Using mock user for development");
                return {
                    id: "dev-" + telegramUser.id,
                    telegram_id: telegramUser.id,
                    username: telegramUser.username || "user" + telegramUser.id,
                    first_name: telegramUser.first_name || "Dev",
                    last_name: telegramUser.last_name || "User",
                    user_type: 'general', // Mock user type
                    profile_completed: false,
                    is_premium: false,
                    created_at: new Date().toISOString(),
                };
            }
            
            function getMockPosts() {
                console.log("📋 Using mock posts for development");
                return [
                    {
                        id: "mock-1",
                        title: "Welcome to TeleBlog! 🎉",
                        excerpt: "This is a demo post showing how TeleBlog works. In production, you'll see real posts from your Supabase database.",
                        content: "This is mock content for development purposes. When your Supabase connection is working, you'll see real blog posts here.",
                        tags: ["welcome", "demo"],
                        image: null,
                        user: { 
                            first_name: "TeleBlog", 
                            last_name: "Team", 
                            username: "teleblog",
                            user_type: "general"
                        },
                        published_at: new Date().toISOString(),
                        created_at: new Date().toISOString(),
                        is_published: true
                    },
                    {
                        id: "mock-2",
                        title: "Getting Started Guide",
                        excerpt: "Learn how to create amazing blog posts and engage with your audience on Telegram.",
                        content: "This is another mock post. Check your Supabase configuration to see real posts.",
                        tags: ["tutorial", "beginners"],
                        image: null,
                        user: { 
                            first_name: "Guide", 
                            last_name: "Bot", 
                            username: "guidebot",
                            user_type: "channel_owner"
                        },
                        published_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
                        created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
                        is_published: true
                    },
                    {
                        id: "mock-3",
                        title: "Monetization Tips",
                        excerpt: "Discover how to earn revenue from your content while providing value to readers.",
                        content: "Mock content about monetization strategies.",
                        tags: ["monetization", "earnings"],
                        image: null,
                        user: { 
                            first_name: "Revenue", 
                            last_name: "Expert", 
                            username: "earnings",
                            user_type: "group_owner"
                        },
                        published_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
                        created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
                        is_published: true
                    }
                ];
            }
            
            // ─── Export ───────────────────────────────────────────────────────────────────
            
            window.SupabaseClient = {
                init: initSupabase,
                testConnection,
                getUserByTelegramId,
                createUser,
                updateUserType, // NEW: Added user type update function
                getPublishedPosts,
                getClient: () => supabaseClient,
                isInitialized: () => isInitialized,
                isConnected: () => connectionTested
            };"
    styles.css -
        "/* Light Theme (default) */
        :root {
          --bg-primary: #cac8c8;
          --bg-secondary: #bebebe;
          --bg-tertiary: #e0e0e0;
          --text-primary: #1a1a1a;
          --text-secondary: #555555;
          --accent-blue: #1e88e5;
          --accent-green: #43a047;
          --accent-purple: #2448aa;
          --border-color: #dcdcdc;
          --button-text: #ffffff;
        }
        
        /* Dark Theme */
        :root.dark {
          --bg-primary: #0d0f15;
          --bg-secondary: #1a1d26;
          --bg-tertiary: #2a2f3d;
          --text-primary: #e8e6e3;
          --text-secondary: #a6ab94;
          --accent-blue: #4a90e2;
          --accent-green: #5cb85c;
          --accent-purple: #cc5047;
          --border-color: #3d424c;
          --button-text: #ffffff;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          background-color: var(--bg-primary);
          color: var(--text-primary);
          line-height: 1.6;
          transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        #app {
          max-width: 100%;
          overflow-x: hidden;
          min-height: 100vh;
        }
        
        header {
          background-color: var(--bg-secondary);
          padding: 15px;
          display: flex;
          justify-content: space-between;
          align-items: center;
          border-bottom: 1px solid var(--border-color);
          position: sticky;
          top: 0;
          z-index: 100;
          transition: all 0.3s ease;
        }
        
        .logo {
          font-size: 1.5rem;
          font-weight: bold;
          color: var(--accent-blue);
        }
        
        .user-info {
          display: flex;
          align-items: center;
          gap: 10px;
        }
        
        .avatar {
          width: 35px;
          height: 35px;
          border-radius: 50%;
          background-color: var(--accent-purple);
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          color: var(--button-text);
        }
        
        #theme-toggle {
          background-color: var(--accent-blue);
          color: var(--button-text);
          border: none;
          padding: 8px 12px;
          border-radius: 4px;
          cursor: pointer;
          transition: background-color 0.3s ease;
        }
        
        #theme-toggle:hover {
          opacity: 0.9;
        }
        
        main {
          padding: 20px;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .loading {
          text-align: center;
          padding: 40px;
          color: var(--text-secondary);
        }
        
        .login-prompt {
          text-align: center;
          padding: 40px;
        }
        
        .btn {
          background-color: var(--accent-blue);
          color: var(--button-text);
          border: none;
          padding: 10px 20px;
          border-radius: 4px;
          cursor: pointer;
          font-weight: bold;
          margin-top: 15px;
          transition: background-color 0.3s ease;
        }
        
        .btn:hover {
          opacity: 0.9;
        }
        
        .btn-primary {
          background-color: var(--accent-green);
        }
        
        .btn-back {
          background-color: var(--bg-tertiary);
          color: var(--text-primary);
        }
        
        .feed {
          display: grid;
          gap: 20px;
        }
        
        .post-card {
          background-color: var(--bg-secondary);
          border-radius: 8px;
          overflow: hidden;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          transition: all 0.3s ease;
          position: relative;
        }
        
        .post-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }
        
        .post-image {
          width: 100%;
          height: 200px;
          background-color: var(--bg-tertiary);
          display: flex;
          align-items: center;
          justify-content: center;
          color: var(--text-secondary);
        }
        
        .post-content {
          padding: 20px;
        }
        
        .post-title {
          font-size: 1.2rem;
          margin-bottom: 10px;
          color: var(--text-primary);
          line-height: 1.4;
        }
        
        .post-excerpt {
          color: var(--text-secondary);
          margin-bottom: 15px;
          line-height: 1.5;
        }
        
        .post-meta {
          display: flex;
          justify-content: space-between;
          align-items: center;
          font-size: 0.9rem;
          color: var(--text-secondary);
          flex-wrap: wrap;
          gap: 10px;
        }
        
        .tag {
          background-color: var(--bg-tertiary);
          color: var(--text-primary);
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 0.8rem;
          margin-right: 5px;
        }
        
        #ad-container {
          margin: 30px 0;
          padding: 20px;
          background-color: var(--bg-tertiary);
          border-radius: 8px;
          text-align: center;
          min-height: 250px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: var(--text-secondary);
          border: 1px solid var(--border-color);
        }
        
        footer {
          text-align: center;
          padding: 20px;
          color: var(--text-secondary);
          font-size: 0.9rem;
          border-top: 1px solid var(--border-color);
          margin-top: 40px;
          background-color: var(--bg-secondary);
        }
        
        .menu {
          display: flex;
          gap: 10px;
          margin-bottom: 20px;
          flex-wrap: wrap;
        }
        
        .menu-btn {
          background-color: var(--bg-tertiary);
          color: var(--text-primary);
          border: none;
          padding: 10px 16px;
          border-radius: 6px;
          cursor: pointer;
          transition: all 0.3s ease;
          font-size: 0.9rem;
          flex: 1;
          min-width: 120px;
          text-align: center;
        }
        
        .menu-btn:hover {
          background-color: var(--accent-blue);
          color: var(--button-text);
        }
        
        .menu-btn.active {
          background-color: var(--accent-blue);
          color: var(--button-text);
        }
        
        .dev-warning {
          background-color: #fffb00;
          color: #000000;
          padding: 10px;
          text-align: center;
          font-size: 0.9rem;
          font-weight: bold;
        }
        
        .empty-state, .error-state {
          text-align: center;
          padding: 40px;
          color: var(--text-primary);
        }
        
        .empty-state h3, .error-state h3 {
          color: var(--text-primary);
          margin-bottom: 10px;
        }
        
        .empty-state p, .error-state p {
          color: var(--text-secondary);
          margin-bottom: 20px;
        }
        
        /* New styles for connection warning and demo badges */
        .connection-warning {
          background-color: var(--bg-tertiary);
          color: var(--text-primary);
          padding: 15px;
          border-radius: 8px;
          margin-bottom: 20px;
          border-left: 4px solid var(--accent-purple);
        }
        
        .connection-warning span {
          font-weight: bold;
          color: var(--accent-purple);
        }
        
        .connection-warning p {
          margin-top: 5px;
          color: var(--text-secondary);
          font-size: 0.9rem;
        }
        
        .mock-badge {
          background: var(--accent-purple);
          color: var(--button-text);
          padding: 0.3rem 0.6rem;
          border-radius: 12px;
          font-size: 0.7rem;
          position: absolute;
          top: 0.8rem;
          right: 0.8rem;
          font-weight: bold;
          z-index: 2;
        }
        
        /* Loading states */
        .loading-state {
          text-align: center;
          padding: 3rem;
          color: var(--text-secondary);
        }
        
        .spinner {
          border: 3px solid var(--bg-tertiary);
          border-top: 3px solid var(--accent-blue);
          border-radius: 50%;
          width: 40px;
          height: 40px;
          animation: spin 1s linear infinite;
          margin: 0 auto 1rem;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        /* Notifications */
        .notification {
          position: fixed;
          top: 20px;
          right: 20px;
          background: var(--bg-secondary);
          color: var(--text-primary);
          padding: 1rem;
          border-radius: 8px;
          z-index: 1000;
          display: flex;
          align-items: center;
          gap: 1rem;
          max-width: 300px;
          border: 1px solid var(--border-color);
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .notification-success { 
          border-left: 4px solid var(--accent-green);
        }
        
        .notification-error { 
          border-left: 4px solid var(--accent-purple);
        }
        
        .notification-loading { 
          border-left: 4px solid var(--accent-blue);
        }
        
        .notification button {
          background: none;
          border: none;
          color: var(--text-secondary);
          font-size: 1.2rem;
          cursor: pointer;
          padding: 0;
          width: 24px;
          height: 24px;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .notification button:hover {
          color: var(--text-primary);
        }
        
        /* Editor styles */
        .editor-container {
          padding: 1rem;
        }
        
        .editor-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1.5rem;
          padding-bottom: 1rem;
          border-bottom: 1px solid var(--border-color);
        }
        
        .post-title-input {
          width: 100%;
          padding: 1rem;
          font-size: 1.5rem;
          border: none;
          border-bottom: 2px solid var(--border-color);
          margin-bottom: 1rem;
          background: transparent;
          color: var(--text-primary);
          transition: border-color 0.3s ease;
        }
        
        .post-title-input:focus {
          outline: none;
          border-bottom-color: var(--accent-blue);
        }
        
        .post-content-input {
          width: 100%;
          height: 300px;
          padding: 1rem;
          border: 1px solid var(--border-color);
          border-radius: 8px;
          background: transparent;
          color: var(--text-primary);
          resize: vertical;
          transition: border-color 0.3s ease;
          font-family: inherit;
        }
        
        .post-content-input:focus {
          outline: none;
          border-color: var(--accent-blue);
        }
        
        .post-tags-input {
          width: 100%;
          padding: 0.8rem;
          border: 1px solid var(--border-color);
          border-radius: 6px;
          background: transparent;
          color: var(--text-primary);
          margin-top: 1rem;
          transition: border-color 0.3s ease;
        }
        
        .post-tags-input:focus {
          outline: none;
          border-color: var(--accent-blue);
        }
        
        /* Profile styles */
        .profile-container {
          padding: 1rem;
        }
        
        .profile-header {
          display: flex;
          align-items: center;
          margin-bottom: 2rem;
        }
        
        .profile-avatar {
          width: 80px;
          height: 80px;
          border-radius: 50%;
          background: var(--accent-blue);
          color: var(--button-text);
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 2rem;
          font-weight: bold;
          margin: 0 auto 1rem;
        }
        
        .profile-info {
          text-align: center;
          margin-bottom: 2rem;
        }
        
        .profile-info h3 {
          color: var(--text-primary);
          margin-bottom: 0.5rem;
        }
        
        .profile-info p {
          color: var(--text-secondary);
        }
        
        .profile-stats {
          display: flex;
          justify-content: space-around;
          margin-bottom: 2rem;
          padding: 1.5rem;
          background: var(--bg-secondary);
          border-radius: 8px;
        }
        
        .stat {
          text-align: center;
        }
        
        .stat strong {
          display: block;
          font-size: 1.5rem;
          color: var(--text-primary);
        }
        
        .stat span {
          color: var(--text-secondary);
          font-size: 0.9rem;
        }
        
        .profile-actions {
          display: flex;
          gap: 1rem;
          justify-content: center;
          flex-wrap: wrap;
        }
        
        @media (max-width: 600px) {
          main {
            padding: 15px;
          }
        
          .post-image {
            height: 150px;
          }
        
          .menu {
            flex-direction: column;
          }
        
          .menu-btn {
            min-width: auto;
            flex: none;
          }
        
          .editor-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
          }
        
          .profile-stats {
            flex-direction: column;
            gap: 1rem;
          }
        
          .profile-actions {
            flex-direction: column;
          }
        
          .notification {
            left: 10px;
            right: 10px;
            max-width: none;
          }
        }
        
        /* Smooth transitions for all interactive elements */
        button, input, textarea, .post-card, .menu-btn {
          transition: all 0.3s ease;
        }
        
        
        /* ================= */
        /* Bottom Navigation */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: var(--bg-secondary);
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-around;
            padding: 10px 0;
            z-index: 1000;
            backdrop-filter: blur(10px);
        }
        
        .nav-item {
            background: none;
            border: none;
            color: var(--text-secondary);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 60px;
        }
        
        .nav-item.active {
            color: var(--accent-blue);
            background-color: var(--bg-tertiary);
        }
        
        .nav-item:hover {
            color: var(--text-primary);
            background-color: var(--bg-tertiary);
        }
        
        .nav-icon {
            font-size: 1.2rem;
        }
        
        .nav-label {
            font-size: 0.7rem;
            font-weight: 500;
        }
        
        /* Adjust main content to account for bottom nav */
        main {
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
            padding-bottom: 80px; /* Space for bottom nav */
        }
        
        /* Adjust footer position */
        footer {
            margin-bottom: 60px; /* Space for bottom nav */
        }"
    theme.js -
        "const themeToggle = document.getElementById("theme-toggle");
        
        // Load saved theme
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme === "dark") {
          document.documentElement.classList.add("dark");
          themeToggle.textContent = "☀️";
        }
        
        themeToggle.addEventListener("click", () => {
          document.documentElement.classList.toggle("dark");
          if (document.documentElement.classList.contains("dark")) {
            localStorage.setItem("theme", "dark");
            themeToggle.textContent = "☀️";
          } else {
            localStorage.setItem("theme", "light");
            themeToggle.textContent = "🌙";
          }
        });
        "
    worker/
        worker.js -
            "// worker/worker.js - Cloudflare Worker for Telegram Bot
            export default {
              async fetch(request, env) {
                const url = new URL(request.url);
                
                // Handle Telegram webhook
                if (url.pathname === '/webhook' && request.method === 'POST') {
                  try {
                    const update = await request.json();
                    
                    // Simple command handling
                    if (update.message && update.message.text) {
                      const chatId = update.message.chat.id;
                      const text = update.message.text;
                      
                      let responseText = '';
                      
                      if (text.startsWith('/start')) {
                        responseText = `📝 Welcome to TeleBlog Lite!\n\nA lightweight blogging platform inside Telegram.\n\nOpen the app: https://your-username.github.io/teleblog-lite`;
                      } else if (text.startsWith('/help')) {
                        responseText = `🤖 Help:\n/start - Launch app\n/menu - Show options\n/posts - Browse articles\n/help - This message`;
                      } else if (text.startsWith('/menu')) {
                        responseText = `📱 Main Menu:\n\n• Read articles\n• Start writing\n• Featured content\n\nOpen app for full features.`;
                      } else if (text.startsWith('/posts')) {
                        responseText = `📚 Latest Posts:\n\n1. Getting Started Guide\n2. Monetization Tips\n3. Audience Building\n\nOpen app to read.`;
                      } else {
                        responseText = `❓ Unknown command. Try /help for options.`;
                      }
                      
                      // Send response back to Telegram
                      await fetch(`https://api.telegram.org/bot8032387671:AAF_v7iLV43XqqE4wtEw2JD6jgvm0CcjYPE/sendMessage`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                          chat_id: chatId,
                          text: responseText
                        })
                      });
                    }
                    
                    return new Response('OK');
                  } catch (error) {
                    return new Response('Error', { status: 500 });
                  }
                }
                
                return new Response('TeleBlog Lite Bot Worker');
              }
            }
            "